services:
  db:
    image: postgis/postgis
    container_name: db_uz
    ports:
      - "5432:5432"
    volumes:
      - ../data:/var/lib/postgresql/data
    restart: unless-stopped
    env_file:
      - ../docker/.env


  pgadmin:
    image: elestio/pgadmin
    container_name: pgadmin_uz
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ../pgadmin_scv:/var/lib/pgadmin/imports
    ports:
      - "8080:80"
    restart: unless-stopped
    env_file:
      - ../docker/.env

  redis:
    image: redis:latest
    container_name: redis_uz
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data


  bot:
    build:
      context: ..
      dockerfile: docker/dockerfiles/DockerfileBot
      args:
        - --no-cache
    container_name: bot_uz
    volumes:
      - ../bot:/app
      - ../logs/bot:/app/logs
      - ../photo:/app/data/photo
    restart: unless-stopped
    depends_on:
      - db
    env_file:
      - .env

  api:
    build:
      context: ..
      dockerfile: docker/dockerfiles/DockerfileAdmin
      args:
        - --no-cache
    container_name: api_uz
    volumes:
      - ../standupuz_web:/app
      - ../photo:/app/media
      - ../logs/django:/app/logs
      - static_volume:/app/staticfiles

    restart: unless-stopped
    ports:
      - "8000:8000"
    depends_on:
      - db
    env_file:
      - .env

  nginx:
    image: nginx:latest
    container_name: nginx_uz
    ports:
      - "80:80"
    volumes:
      - ../logs/nginx:/var/log/nginx
      - front_build:/usr/share/nginx/html:ro
      - static_volume:/app/staticfiles:ro
      - ../nginx/conf.d/base.conf:/etc/nginx/conf.d/default.conf
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt

    depends_on:
      - api
      - standup-front

#  standup-front:
#    build:
#      context: ..
#      dockerfile: docker/dockerfiles/DockerfileSpot
#    container_name: front_uz
#    volumes:
#      - front_build:/app/build
#      - ../photo:/app/public/site/photo
#    env_file:
#      - .env
#    depends_on:
#      - api
#    command: >
#      sh -c "
#        npm ci &&
#        npm run build &&
#        echo 'âœ” React build complete' &&
#        tail -f /dev/null
#      "

  certbot:
    image: certbot/certbot
    container_name: certbot_bcx
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt


  certbot-renew:
    image: certbot/certbot
    container_name: certbot_renew_bcx
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
      - ../logs/certbot:/var/log/letsencrypt
    entrypoint: sh -c
    command: >
      "trap exit TERM; while :; do certbot renew --quiet >> /var/log/letsencrypt/renew.log 2>&1; sleep 12h & wait $${!}; done;"
    restart: unless-stopped


volumes:
  pgadmin_data:
  postgres_data:
  redis_data:
  front_build:
  static_volume:

