from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardMarkup
from datetime import time
import typing as t

import db
from settings.config import Config
from utils.base_utils import get_weekend_date_list
from enums import AdminCB, BaseCB, Action, EditEventStep


# –æ—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–æ–≤
def get_admin_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É', callback_data=AdminCB.UPDATE_TABLE.value)
    kb.button(text='‚ûï –°–æ–∑–¥–∞—Ç—å –∏–≤–µ–Ω—Ç', callback_data=f'{AdminCB.NEW_EVENT.value}:{Action.NEW.value}:0')
    kb.button(text='üñç –ò–∑–º–µ–Ω–∏—Ç—å –∏–≤–µ–Ω—Ç', callback_data=AdminCB.EDIT_EVENT_LIST.value)
    kb.button(text='üì≤ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data=AdminCB.SEND_MESSAGE_1.value)
    kb.button(text='üôã‚Äç‚ôÇÔ∏è –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è', callback_data=AdminCB.EDIT_HELLO_TEXT_1.value)
    kb.button(text='üö∂ –í–æ–π—Ç–∏ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', callback_data=BaseCB.BACK_COM_START.value)

    return kb.adjust(1).as_markup()


# 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–≤–µ–Ω—Ç–æ–≤
def get_10_last_event_kb(events: list[db.Event]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data=AdminCB.BACK_START.value)

    for event in events:
        is_active = '–∞–∫—Ç–∏–≤.' if event.is_active == 1 else '–Ω–µ –∞–∫—Ç–∏–≤.'
        kb.button(
            text=f'{event.title} ({is_active})',
            callback_data=f'{AdminCB.NEW_EVENT.value}:{Action.EDIT.value}:{event.id}')

    return kb.adjust(1).as_markup()


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def get_send_message_kb(events: list[db.Event], data: dict) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data=BaseCB.CLOSE.value)
    kb.button(
        text='‚úîÔ∏è –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º' if data['everyone'] else '–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
        callback_data=f'{AdminCB.SEND_MESSAGE_3.value}:{Action.EVERYONE.value}'
    )
    for event in events:
        emoji = '‚úîÔ∏è' if data['everyone'] or event.id in data['choice_list'] else ''
        kb.button(
            text=f'{emoji} {event.title} ({event.event_date})'.strip(),
            callback_data=f'{AdminCB.SEND_MESSAGE_3.value}:{event.id}'
        )
    kb.button(text='üì≤ –û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data=AdminCB.SEND_MESSAGE_4.value)
    return kb.adjust(1).as_markup()


# –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
def get_edit_hello_text_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data=BaseCB.CLOSE.value)
    kb.button(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=AdminCB.EDIT_HELLO_TEXT_3.value)
    return kb.adjust(1).as_markup()


# —Å–æ–∑–¥–∞—Ç—å –∏–≤–µ–Ω—Ç
def get_edit_event_kb(type_event: str) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    if type_event == Action.NEW.value:
        kb.button(text='üñç –ù–∞–∑–≤–∞–Ω–∏–µ', callback_data=f'{AdminCB.EDIT_EVENT_1.value}:{EditEventStep.TITLE.value}')
        kb.button(text='üìç –õ–æ–∫–∞—Ü–∏—è', callback_data=f'{AdminCB.EDIT_EVENT_1.value}:{EditEventStep.CLUB.value}')
        kb.button(text='üìÖ –î–∞—Ç–∞', callback_data=f'{AdminCB.EDIT_EVENT_1.value}:{EditEventStep.DATE.value}')
        kb.button(text='‚è∞ –í—Ä–µ–º—è', callback_data=f'{AdminCB.EDIT_EVENT_1.value}:{EditEventStep.TIME.value}')
        kb.button(text='ü´∞ –ú–µ—Å—Ç–∞ –∏ –æ–ø—Ü–∏–∏', callback_data=f'{AdminCB.EDIT_EVENT_1.value}:{EditEventStep.PRICE.value}')
        kb.button(text='‚úÖ –°–æ–∑–¥–∞—Ç—å', callback_data=f'{AdminCB.EDIT_EVENT_ACCEPT.value}')

    else:
        kb.button(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=f'{AdminCB.EDIT_EVENT_ACCEPT.value}')

    return kb.adjust(2, 3, 1).as_markup()


# –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è
def get_choice_date_kb() -> InlineKeyboardMarkup:
    date_list = get_weekend_date_list()
    kb = InlineKeyboardBuilder()
    for date in date_list:
        kb.button(text=f'{date}', callback_data=f'{AdminCB.EDIT_EVENT_2.value}:{date}')

    kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data=AdminCB.BACK_EDIT_EVENT.value)
    return kb.adjust(2).as_markup()


# –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è
def get_choice_time_kb(times: list[db.PopTimeRow]) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    for time in times:
        time_str = time.event_time.strftime(Config.time_form)
        kb.button(text=time_str, callback_data=f'{AdminCB.EDIT_EVENT_2.value} {time_str}')

    kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data=AdminCB.BACK_EDIT_EVENT.value)
    return kb.adjust(2).as_markup()


# –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è
def get_back_edit_event_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text='üîô –ù–∞–∑–∞–¥', callback_data=AdminCB.BACK_EDIT_EVENT.value)
    return kb.adjust(2).as_markup()


# –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–π –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∏–≤–µ–Ω—Ç
def update_is_active_event_kb(is_active: bool, event_id: int):
    kb = InlineKeyboardBuilder()
    if is_active:
        kb.button(text='‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π', callback_data=f'{AdminCB.EVENT_ACTIVE_STATUS.value}:0:{event_id}')
    else:
        kb.button(text='‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π', callback_data=f'{AdminCB.EVENT_ACTIVE_STATUS.value}:1:{event_id}')
    return kb.adjust(2).as_markup()
